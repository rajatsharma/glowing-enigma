{"version":3,"sources":["howto.gif","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Main","state","modal","_this2","this","react_default","a","createElement","lib","gridTemplateColumns","gridTemplateRows","placeItems","className","Fragment","z","w","h","top","left","bg","is","Fixed","onClick","_","setState","justifyContent","alignItems","style","src","howto","alt","direction","boxShadow","f","pb","window","open","my","cursor","background-image","fontStyle","Date","getFullYear","Component","Boolean","location","hostname","match","ReactDOM","render","App_Main","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0QCYnBC,6MACnBC,MAAQ,CAAEC,OAAO,2EAER,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACEC,oBAAoB,kBACpBC,iBAAiB,OACjBC,WAAW,UACXZ,EAAE,QACFa,UAAU,YAETR,KAAKH,MAAMC,OACVG,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACER,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACEM,EAAE,KACFC,EAAE,OACFC,EAAE,OACFC,IAAI,IACJC,KAAK,IACLC,GAAG,oBAELd,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACEO,EAAE,OACFC,EAAE,OACFI,GAAIC,QACJC,QAAS,SAAAC,GAAC,OAAIpB,EAAKqB,SAAS,CAAEtB,OAAO,KACrCuB,eAAe,SACfC,WAAW,SACXC,MAAO,CAAEV,IAAK,IAAKC,KAAM,MAEzBb,EAAAC,EAAAC,cAAA,OAAKqB,IAAKC,IAAOC,IAAI,YAI3BzB,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACEW,GAAG,UACHP,UAAU,OACVc,WAAW,SACXD,eAAe,SACfM,UAAU,SACVC,UAAU,kCAEV3B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMyB,EAAE,OAAOb,GAAG,KAAKc,GAAG,QAA1B,cAGA7B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAM0B,GAAG,QAAT,0DAGA7B,EAAAC,EAAAC,cAACC,EAAA,OAAD,CACEc,QAAS,SAAAC,GAAC,OAAIY,OAAOC,KAAK,uCAC1BH,EAAE,OACFI,GAAG,OACHrB,EAAE,OACFD,EAAE,QACFY,MAAO,CACLW,OAAQ,UACRC,mBACE,oEATN,UAcAlC,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMyB,EAAE,OAAOO,UAAU,WAAzB,WACUnC,EAAAC,EAAAC,cAAA,6BADV,wBAIFF,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACEI,UAAU,SACVoB,UAAU,iCACVb,GAAG,UACHM,eAAe,SACfC,WAAW,UAEXrB,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACEmB,MAAO,CAAEW,OAAQ,WACjBhB,QAAS,SAAAC,GAAC,OAAIpB,EAAKqB,SAAS,CAAEtB,OAAO,MAFvC,YAOFG,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMI,UAAU,QAAQa,eAAe,SAASC,WAAW,UAA3D,SACK,IAAIe,MAAOC,cADhB,yBAjF0BC,aCAdC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.068851c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/howto.48cdf3f8.gif\";","import React, { Component } from 'react';\nimport {\n  Flex,\n  Grid,\n  Text,\n  Button,\n  Fixed,\n  Absolute\n} from '@elementary/components';\nimport './App.css';\nimport howto from './howto.gif';\n\nexport default class Main extends Component {\n  state = { modal: false };\n\n  render() {\n    return (\n      <Grid\n        gridTemplateColumns=\"1fr 1fr 1fr 1fr\"\n        gridTemplateRows=\"auto\"\n        placeItems=\"stretch\"\n        p=\"100px\"\n        className=\"template\"\n      >\n        {this.state.modal && (\n          <>\n            <Absolute\n              z=\"96\"\n              w=\"100%\"\n              h=\"100%\"\n              top=\"0\"\n              left=\"0\"\n              bg=\"rgba(0,0,0,0.5)\"\n            />\n            <Flex\n              w=\"100%\"\n              h=\"100%\"\n              is={Fixed}\n              onClick={_ => this.setState({ modal: false })}\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              style={{ top: '0', left: '0' }}\n            >\n              <img src={howto} alt=\"howto\" />\n            </Flex>\n          </>\n        )}\n        <Flex\n          bg=\"#FEFEFE\"\n          className=\"hero\"\n          alignItems=\"center\"\n          justifyContent=\"center\"\n          direction=\"column\"\n          boxShadow=\"0 6px 15px rgba(36,37,38,0.08)\"\n        >\n          <Text f=\"36px\" is=\"h1\" pb=\"20px\">\n            Autoreadme\n          </Text>\n          <Text pb=\"20px\">\n            Creates A readme file as soon as you create a new Repo\n          </Text>\n          <Button\n            onClick={_ => window.open('https://github.com/apps/autoreadme')}\n            f=\"16px\"\n            my=\"50px\"\n            h=\"40px\"\n            w=\"120px\"\n            style={{\n              cursor: 'pointer',\n              'background-image':\n                'linear-gradient(-225deg, #FFE29F 0%, #FFA99F 48%, #FF719A 100%)'\n            }}\n          >\n            Get It\n          </Button>\n          <Text f=\"14px\" fontStyle=\"italics\">\n            Choose `<b>All repositories</b>` while installing.\n          </Text>\n        </Flex>\n        <Flex\n          className=\"footer\"\n          boxShadow=\"0 6px 15px rgba(36,37,38,0.08)\"\n          bg=\"#FEFEFE\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <Text\n            style={{ cursor: 'pointer' }}\n            onClick={_ => this.setState({ modal: true })}\n          >\n            How To?\n          </Text>\n        </Flex>\n        <Flex className=\"text2\" justifyContent=\"center\" alignItems=\"center\">\n          Â© {new Date().getFullYear()} Rajat Sharma\n        </Flex>\n      </Grid>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}